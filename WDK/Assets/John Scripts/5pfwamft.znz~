using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour
{
    [SerializeField] Transform feetPos;
    [SerializeField] Transform feetPos2;
    [SerializeField] LayerMask whatIsGround;
                     Rigidbody2D playerRb;
                     Quaternion upright;
                     Vector3 mousePos;
                     Vector3 playerPos;

    [SerializeField] int jumpSteps;
                     int stepsJumped = 0;

    [SerializeField] float speed;
    [SerializeField] float jumpSpeed;
    [SerializeField] float checkRadius;
    [SerializeField] float fallSpeed;
                     float stopJumpThreshold = 7;
                     float hInput;
                     float angle;

    bool jumping;
    bool grounded;

    void Start()
    {
        playerRb = GetComponent<Rigidbody2D>();

        upright = transform.rotation;
    }

    void Update()
    {
        RotatePlayer();

        grounded = Physics2D.OverlapCircle(feetPos.position, checkRadius, whatIsGround);
        grounded = Physics2D.OverlapCircle(feetPos2.position, checkRadius, whatIsGround);

        JumpInput();

        if (jumping)
        {
            playerRb.constraints = ~RigidbodyConstraints2D.FreezeAll;
        }

        if (grounded)
        {
            transform.rotation = upright;
        }
    }

    private void FixedUpdate()
    {
        hInput = Input.GetAxis("Horizontal");

        playerRb.velocity = new Vector2(hInput * speed * Time.deltaTime, playerRb.velocity.y);

        Jump();
    }

    private void Jump()
    {
        if (jumping)
        {
            if (stepsJumped < jumpSteps)
            {
                playerRb.velocity = new Vector2(playerRb.velocity.x, jumpSpeed);
                stepsJumped++;
            } 
            else
            {
                StopJumpSlow();
            }
        }

        if (playerRb.velocity.y < -(Mathf.Abs(fallSpeed)))
        {
            playerRb.velocity = new Vector2(playerRb.velocity.x, Mathf.Clamp(playerRb.velocity.y, -(Mathf.Abs(fallSpeed)), Mathf.Infinity));
        }
        
    }

    private void JumpInput()
    {
        if (Input.GetKeyDown(KeyCode.Space) && grounded)
        {
            jumping = true;
        }

        if (!Input.GetKey(KeyCode.Space) && stepsJumped < jumpSteps && stepsJumped > stopJumpThreshold && jumping)
        {
            StopJumpQuick();
        }

        else if (!Input.GetKey(KeyCode.Space) && stepsJumped < stopJumpThreshold && jumping)
        {
            StopJumpSlow();
        }
    }

    private void StopJumpSlow()
    {
        stepsJumped = 0;
        jumping = false;
    }

    private void StopJumpQuick()
    {
        stepsJumped = 0;
        jumping = false;
        playerRb.velocity = new Vector2(playerRb.velocity.x, 0);
    }

    private void RotatePlayer()
    {
        if (jumping)
        {
            mousePos = Input.mousePosition;
            playerPos = Camera.main.WorldToScreenPoint(transform.position);

            mousePos.x = mousePos.x - playerPos.x;
            mousePos.y = mousePos.y - playerPos.y;

            angle = Mathf.Atan2(mousePos.y, mousePos.x) * Mathf.Rad2Deg;
            transform.rotation = Quaternion.Euler(new Vector3(0, 0, angle));
        } 
    }
}
